{
    "name": "your_vendor/your_project_name",
    "description": "A simple PHP project with authentication.",
    "type": "project",
    "license": "MIT",
    "autoload": {
        "psr-4": {
            "App\\": "app/"
        }
    },
    "require": {
        "php": ">=7.4",
        "firebase/php-jwt": "^6.0",       // برای JWT
        "vlucas/phpdotenv": "^5.0"        // برای .env (اختیاری اما توصیه شده)
        // ممکن است پکیج‌های دیگری نیز نیاز شود
    }
}





DB_HOST=localhost
DB_NAME=your_database_name
DB_USER=your_database_user
DB_PASS=your_database_password
JWT_SECRET_KEY=your_very_secret_key_for_jwt


// app/config/app.php
<?php

return [
    'name' => 'My PHP Project',
    'timezone' => 'Asia/Tehran', // یا هر timezone دیگری که نیاز دارید
    // میتونید تنظیمات بیشتری رو اینجا اضافه کنید
];


// app/config/database.php
<?php

// مطمئن شید که vlucas/phpdotenv رو نصب کردید و در public/index.php بارگذاری میشه
// در غیر این صورت، این متغیرها در دسترس نخواهند بود

return [
    'driver'    => 'mysql', // یا 'pgsql' برای PostgreSQL
    'host'      => getenv('DB_HOST'),
    'database'  => getenv('DB_NAME'),
    'username'  => getenv('DB_USER'),
    'password'  => getenv('DB_PASS'),
    'charset'   => 'utf8mb4',
    'collation' => 'utf8mb4_unicode_ci',
    'prefix'    => '', // اگر نیاز به پیشوند برای جدول‌ها دارید
];




// app/Core/Database.php
<?php

namespace App\Core;

use PDO;
use PDOException;

class Database
{
    private static $instance = null;
    private $conn;
    private $config;

    private function __construct()
    {
        // لود کردن تنظیمات دیتابیس
        $this->config = require __DIR__ . '/../config/database.php';

        $dsn = "{$this->config['driver']}:host={$this->config['host']};dbname={$this->config['database']};charset={$this->config['charset']}";
        $options = [
            PDO::ATTR_ERRMODE            => PDO::ERRMODE_EXCEPTION, // نمایش خطاها به صورت Exception
            PDO::ATTR_DEFAULT_FETCH_MODE => PDO::FETCH_ASSOC,       // دریافت نتایج به صورت آرایه انجمنی (associative array)
            PDO::ATTR_EMULATE_PREPARES   => false,                  // غیرفعال کردن emulation برای Prepared Statements (امنیت بالاتر)
        ];

        try {
            $this->conn = new PDO($dsn, $this->config['username'], $this->config['password'], $options);
        } catch (PDOException $e) {
            die("Connection failed: " . $e->getMessage()); // بهتره در محیط production خطای کلی نمایش داده بشه
        }
    }

    public static function getInstance()
    {
        if (!self::$instance) {
            self::$instance = new Database();
        }
        return self::$instance;
    }

    public function getConnection()
    {
        return $this->conn;
    }
}